"use client";

import { useState, useEffect } from "react";

import { useInView } from "react-intersection-observer";

import ImageList from "@/components/List";
import LoadingImages from "@/components/List/Loading";
import LoadingSpinner from "@/components/LoadingSpinner";
import SectionHeading from "@/components/SectionHeading";

import { searchAll } from "@/tmdb/api/search";
import type { Movie, Movies } from "@/tmdb/types/movie";
import type { TVShow, TVShows } from "@/tmdb/types/tv";
import { MultiSearchRes } from "@/tmdb/types/search";

// export const metadata = {
//   title: "Search - Metflix",
//   description: "Generated by create next app",
// };

export type Props = {
  params: {};
  searchParams?: { [key: string]: string | string[] | undefined };
};

export type Item = MultiSearchRes["results"][number];

export default function SearchPage({ params, searchParams }: Props) {
  const [items, setItems] = useState<Item[]>([]);
  const [currPageCount, setCurrPageCount] = useState(0);
  const [totalPageCount, setTotalPageCount] = useState(0);

  const [loaderDivRef, inView, entry] = useInView({});

  const getTitle = (item: Item) => {
    const { media_type: mediaType } = item;

    if (mediaType === "movie") {
      return item.title ?? item.original_title;
    }

    if (mediaType === "tv") {
      return item.name ?? item.original_name;
    }

    if (mediaType === "person") {
      return item.name;
    }

    return "";
  };

  const getPoseImage = (item: Item) => {
    const { media_type: mediaType } = item;
    let imagePath = "";

    if (mediaType === "movie" || mediaType === "tv") {
      imagePath = item.poster_path ?? item.backdrop_path;
    }

    if (item.media_type === "person") {
      imagePath = item.profile_path;
    }

    return `https://image.tmdb.org/t/p/w500${imagePath}`;
  };

  const getDetailsHref = (item: Item) => {
    const { media_type: mediaType } = item;

    if (mediaType === "movie") {
      return `/details/movie/${item.id}`;
    }

    if (mediaType === "tv") {
      return `/details/tv-show/${item.id}`;
    }

    return "";
  };

  useEffect(() => {
    if (currPageCount !== 0 && currPageCount >= totalPageCount) return;

    const fetchMovies = async () => {
      const res = await searchAll({
        query: searchParams?.q?.toString() ?? "",
        page: currPageCount + 1,
      });
      if (!res) return;

      const { results, total_pages } = res;

      setItems((prev) => [...prev, ...results]);
      setCurrPageCount((prev) => prev + 1);
      setTotalPageCount(total_pages);
    };

    fetchMovies();
  }, [inView]);

  return (
    <section className="mt-20">
      <SectionHeading>
        {`Search Results for  ${searchParams?.q?.toString()}`}{" "}
      </SectionHeading>

      {items.length ? (
        <ImageList
          items={items.map((item) => ({
            id: `${item.id}-${item.media_type}`,
            postImg: getPoseImage(item),
            title: getTitle(item),
            avgRatings: 10,
            totalRatings: 10,
            href: getDetailsHref(item),
          }))}
        />
      ) : (
        <LoadingImages />
      )}

      {!!items.length &&
        !(currPageCount !== 0 && currPageCount >= totalPageCount) && (
          <div ref={loaderDivRef} className="mt-8 flex justify-center">
            <LoadingSpinner />
          </div>
        )}
    </section>
  );
}
